#!/bin/bash
# ./run - build then run a project in the appropriate directory
set -euo pipefail

show_help() {
	echo "Usage: $0 <project> [<options>]"
	echo "Available projects:"
	echo "    lunatic  supreme  sleepless  loonyland  loonyland2  mystic"
	echo "Options:"
	echo "    --fullscreen  Run the game in fullscreen (default: windowed)."
	echo "    --release     Run the release build of the game (default: debug)."
	echo "    --gdb         Start GDB prepared to debug the game."
	echo "    --nobuild     Skip compiling before running."
	echo "    --clang       Compile using the clang toolchain (default: gcc)."
	echo "    --valgrind    Run the game under valgrind memory checker (slow)."
	echo "    --callgrind   Run the game under callgrind profiler (slow)."
	echo "    --two         Run two copies of the game at once."
}

# Default settings
TOOL=
PROJECT=
CONFIG=debug
ARGS=window
NOBUILD=
TOOLSET=gcc
TWO=

# Read command-line arguments
while [ $# -ne 0 ]; do
	ARG="$1"; shift
	case "$ARG" in
		"--fullscreen")
			ARGS=
			;;
		"--release")
			CONFIG=release
			;;
		"--gdb")
			TOOL=gdb
			;;
		"--valgrind")
			TOOL=valgrind
			;;
		"--callgrind")
			TOOL=callgrind
			;;
		"--nobuild")
			NOBUILD=ON
			;;
		"--clang")
			TOOLSET=clang
			;;
		"--two")
			TWO=ON
			;;
		-*)
			show_help; exit 1
			;;
		*)
			if [ $PROJECT ]; then
				# Exit if two projects were specified
				show_help; exit 1
			fi
			PROJECT=$ARG
			;;
	esac
done
if [ -z $PROJECT ]; then
	# Exit if no project was specified
	show_help; exit 1
fi

# Ensure all dependencies are installed
./tools/build/install-deps.sh

# Ensure the project's build is up to date
if [ -z "$NOBUILD" ]; then
	make $PROJECT config=$CONFIG toolset=$TOOLSET
fi

# Ensure the project's assets exist
GAMEDIR="build/game/$PROJECT"
if [ ! -d "$GAMEDIR" ]; then
	./tools/build/extract-assets.sh "$PROJECT"
fi

# Run the project
EXE="$PWD/build/$TOOLSET-$CONFIG/$PROJECT/$PROJECT"
cd "$GAMEDIR"
if [ "$TOOL" = "gdb" ]; then
	echo "==== Debugging $PROJECT ($CONFIG) ===="
	# Catches "the runtime was asked to terminate in an usual way".
	# If libc++ is dynamically linked, the breakpoint should be pending.
	gdb -q \
		-ex 'set breakpoint pending on' \
		-ex 'break abort' \
		-ex 'set breakpoint pending auto' \
		--args "$EXE" $ARGS
elif [ "$TOOL" = "valgrind" ]; then
	echo "==== Valgrinding $PROJECT ($CONFIG) ===="
	valgrind "$EXE" $ARGS
elif [ "$TOOL" = "callgrind" ]; then
	echo "==== Callgrinding $PROJECT ($CONFIG) ===="
	valgrind --tool=callgrind "$EXE" $ARGS
else
	echo "==== Running $PROJECT ($CONFIG) ===="
	if [ "$TWO" ]; then
		"$EXE" $ARGS &
	fi
	"$EXE" $ARGS
	wait
fi
